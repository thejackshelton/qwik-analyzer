name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to npm after building'
        required: false
        default: false
        type: boolean
      version:
        description: 'Version bump type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build:rust --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build:rust --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build:rust --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |
              sudo apt-get update
              sudo apt-get install musl-tools -y
              pnpm build:rust --target x86_64-unknown-linux-musl
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm build:rust --target x86_64-pc-windows-msvc

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: ${{ matrix.settings.build }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: "*.node"
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event.inputs.publish == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Copy binaries to root
        run: |
          find artifacts -name "*.node" -exec cp {} . \;
          ls -la *.node
      - name: Generate NAPI wrapper
        run: pnpm build
      - name: List all files for debugging
        run: ls -la *.js *.d.ts *.node && ls -la dist/
      - name: Auto-increment version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get current version on npm to avoid conflicts
          CURRENT_NPM_VERSION=$(npm view qwik-analyzer version 2>/dev/null || echo "0.0.0")
          echo "Current npm version: $CURRENT_NPM_VERSION"
          
          # Set package.json to current npm version first
          npm version $CURRENT_NPM_VERSION --no-git-tag-version --allow-same-version
          
          # Now increment from the npm version
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version will be: $NEW_VERSION"
      - name: Publish to npm
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 